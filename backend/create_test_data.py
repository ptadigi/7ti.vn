#!/usr/bin/env python3
"""Script ƒë·ªÉ t·∫°o test data cho bills v√† customers"""

from config.database import engine
from models.bill import Bill, BillStatus
from models.customer import Customer
from models.user import User
from sqlalchemy.orm import sessionmaker
import bcrypt

def main():
    SessionLocal = sessionmaker(bind=engine)
    db = SessionLocal()
    
    try:
        # T·∫°o test customers
        print("=== T·∫†O TEST CUSTOMERS ===")
        
        # Ki·ªÉm tra c√≥ user n√†o kh√¥ng
        user = db.query(User).first()
        if not user:
            print("‚ùå Kh√¥ng c√≥ user n√†o, t·∫°o user admin tr∆∞·ªõc...")
            hashed_password = bcrypt.hashpw('admin'.encode('utf-8'), bcrypt.gensalt())
            user = User(
                username='admin',
                email='admin@example.com',
                password_hash=hashed_password.decode('utf-8'),
                role='admin'
            )
            db.add(user)
            db.commit()
            print(f"‚úÖ ƒê√£ t·∫°o user admin v·ªõi ID: {user.id}")
        
        # T·∫°o customers
        customer1 = Customer(
            name='Nguy·ªÖn VƒÉn A',
            phone='0123456789',
            email='a@example.com',
            zalo='nguyenvana',
            bank_account='1234567890',
            bank_name='Vietcombank',
            address='H√† N·ªôi',
            created_by=user.id
        )
        
        customer2 = Customer(
            name='Tr·∫ßn Th·ªã B',
            phone='0987654321',
            email='b@example.com',
            zalo='tranthib',
            bank_account='0987654321',
            bank_name='BIDV',
            address='TP.HCM',
            created_by=user.id
        )
        
        customer3 = Customer(
            name='L√™ VƒÉn C',
            phone='0555666777',
            email='c@example.com',
            zalo='levanc',
            bank_account='1122334455',
            bank_name='Agribank',
            address='ƒê√† N·∫µng',
            created_by=user.id
        )
        
        db.add_all([customer1, customer2, customer3])
        db.commit()
        print(f"‚úÖ ƒê√£ t·∫°o 3 test customers")
        
        # T·∫°o test bills
        print("\n=== T·∫†O TEST BILLS ===")
        
        bill1 = Bill(
            contract_code='PB12345678',
            customer_name='Nguy·ªÖn VƒÉn A',
            address='H√† N·ªôi',
            amount=100000,
            period='08/2025',
            status=BillStatus.IN_WAREHOUSE
        )
        
        bill2 = Bill(
            contract_code='PB87654321',
            customer_name='Tr·∫ßn Th·ªã B',
            address='TP.HCM',
            amount=150000,
            period='09/2025',
            status=BillStatus.IN_WAREHOUSE
        )
        
        bill3 = Bill(
            contract_code='PB11223344',
            customer_name='L√™ VƒÉn C',
            address='ƒê√† N·∫µng',
            amount=200000,
            period='10/2025',
            status=BillStatus.IN_WAREHOUSE
        )
        
        db.add_all([bill1, bill2, bill3])
        db.commit()
        print(f"‚úÖ ƒê√£ t·∫°o 3 test bills")
        
        # Ki·ªÉm tra k·∫øt qu·∫£
        print("\n=== KI·ªÇM TRA K·∫æT QU·∫¢ ===")
        customer_count = db.query(Customer).count()
        bill_count = db.query(Bill).count()
        user_count = db.query(User).count()
        
        print(f"üìä Database hi·ªán t·∫°i:")
        print(f"   - Users: {user_count}")
        print(f"   - Customers: {customer_count}")
        print(f"   - Bills: {bill_count}")
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    main()
